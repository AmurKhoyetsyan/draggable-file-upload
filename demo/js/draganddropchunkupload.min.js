/***********************************************************************
 * 
 * Copyright (c) 2020 Amur Khoyetsyan
 * 
 * The MIT License (MIT)
 * 
 * When we bring the file closer to the installation area
 * a new class is added to the installation section called "dragover",
 * with which we can shape the installation areaâ€¤
 * 
 ************************************************************************/

let Chunk={name:"Chunk Uploader",file:{},inProcess:null,completed:function(){return{chunks:100*(this.file.numberOfChunk-this.inProcess)/this.file.numberOfChunk,one:100/this.file.numberOfChunk}}},params={chunkSize:1e6,url:null,file:null,uniqueID:!0,uniqueIDLen:10,keys:{key:"file",end:"end",order:"order"},form:[],headers:{"Content-type":"multipart/form-data"},start:null,end:null,onError:null,progress:null};Chunk.params=params;const setParams=e=>{for(let n in e)Chunk.params[n]=e[n]},generateUniqueID=(e=10,n="")=>(n+=Math.random().toString(36).substr(2,9)).length>e?n.substr(0,e):n.length===e?n:generateUniqueID(e,n),updateProgress=e=>{if(e.lengthComputable){let n=Math.round(e.loaded/e.total*100),t=Chunk.completed(),r=t.chunks+t.one*n/100;null!==Chunk.params.progress&&Chunk.params.progress(r)}},fileUploader=e=>{let n=new XMLHttpRequest,t=Chunk.params.headers;n.upload.addEventListener("progress",updateProgress),n.open("POST",Chunk.params.url);for(let e in t)n.setRequestHeader(e,t[e]);return new Promise((t,r)=>{n.send(e[0]),n.onload=(n=>{t({chunks:e,event:n.currentTarget})}),n.onerror=(e=>{r(new TypeError(e))})})},uploadChunks=e=>{fileUploader(e).then(e=>{if(e.chunks.shift(),Chunk.inProcess=e.chunks.length,e.chunks.length>0)uploadChunks(e.chunks);else if(null!==Chunk.params.end){let n=e.event;try{Chunk.params.end({response:JSON.parse(n.response),statusText:n.statusText,status:n.status})}catch(e){Chunk.params.onError(e)}}}).catch(e=>{null!==Chunk.params.onError&&Chunk.params.onError(e)})},createChunk=(e,n=0,t=1,r=[])=>{let l=Chunk.params,a=Math.min(n+l.chunkSize,e.size),d=e.slice(n,a),s=new FormData,i=Chunk.file.numberOfChunk===t;if(s.append(l.keys.key,d),s.append(l.keys.order,t),s.append(l.keys.end,i),l.form.forEach(e=>{s.append(e.key,e.value)}),r.push(s),!i)return createChunk(e,a,++t,r);Chunk.inProcess=t,uploadChunks(r)};Chunk.uploader=(e=>{setParams(e);let n=e.file;if(null!==n)try{null!==Chunk.params.start&&Chunk.params.start(),Chunk.file.fileSize=n.size,Chunk.file.numberOfChunk=Math.ceil(n.size/Chunk.params.chunkSize),Chunk.params.uniqueID&&Chunk.params.form.push({key:"uuid",value:generateUniqueID(Chunk.params.uniqueIDLen)}),createChunk(n)}catch(e){null!==Chunk.params.onError&&Chunk.params.onError(e)}else null!==Chunk.params.onError&&Chunk.params.onError(new TypeError("Change File"))});let DAD={name:"Drag And Drop",elem:{file:[],drag:[],draggable:[]},file:null,data:{name:"Drag And Drop",files:[]}},defaultProps={element:null,input:null,start:void 0,end:void 0};const isEmpty=(e,n)=>{if(Array.isArray(e))return 0===e.length&&(n(new Error("Not a File")),!0);try{return 0===Object.keys(e).length&&(n(new Error("Not a File")),!0)}catch(e){n(new TypeError("Is not a array or object"))}return!1},addClass=(e,n)=>{null!==n&&null!==DAD.elem.drag?DAD.elem.drag.forEach(e=>{if(e.elem===n)return!e.elem.classList.contains("dragover")&&e.elem.classList.add("dragover"),!0}):null!==DAD.elem.drag&&DAD.elem.drag.forEach(n=>{if(n.elem===e.target)return!n.elem.classList.contains("dragover")&&n.elem.classList.add("dragover"),!0})},removeClass=e=>{null!==DAD.elem.drag&&DAD.elem.drag.forEach(e=>{e.elem.classList.contains("dragover")&&e.elem.classList.remove("dragover")})},dragenter=(e,n=null)=>{e.preventDefault(),addClass(e,n)},dragleave=e=>{e.preventDefault(),removeClass()},dragover=(e,n=null)=>{e.preventDefault(),addClass(e,n)},getElemName=e=>{let n={};return n.id=e.hasAttribute("id")?e.getAttribute("id"):null,n.name=e.hasAttribute("name")?e.getAttribute("name"):null,n.classes=e.hasAttribute("class")?e.getAttribute("class"):null,n.tagName=e.nodeName,n.node=e,n};function FileListItem(e){for(var n,t=n=(e=[].slice.call(Array.isArray(e)?e:arguments)).length,r=!0;t--&&r;)r=e[t]instanceof File;if(!r)throw new TypeError("expected argument to FileList is File or array of File objects");for(t=new ClipboardEvent("").clipboardData||new DataTransfer;n--;)t.items.add(e[n]);return t.files}const getIndex=(e,n)=>{let t=0;if("drop"===n){t=DAD.elem.drag.length;for(let n=0;n<t;n++)if(DAD.elem.drag[n].elem===e)return{index:n,type:"drop"}}else{t=DAD.elem.file.length;for(let n=0;n<t;n++)if(DAD.elem.file[n].elem===e)return{index:n,type:"file"}}return{index:-1,type:""}},addFile=(e,n,t)=>{let r=getIndex(n,t);if(-1!==r.index&&("drop"===r.type?void 0!==DAD.elem.drag[r.index].start&&DAD.elem.drag[r.index].start():void 0!==DAD.elem.file[r.index].start&&DAD.elem.file[r.index].start()),DAD.file=[],DAD.data.files=[],removeClass(),DAD.file="drop"===t?e.dataTransfer.files:e.target.files,isEmpty(DAD.file,e=>{-1!==r.index&&("drop"===r.type?void 0!==DAD.elem.drag[r.index].end&&DAD.elem.drag[r.index].end(null,e):void 0!==DAD.elem.file[r.index].end&&DAD.elem.file[r.index].end(null,e))}))return!1;let l=getTypeMultiple(n);return void 0!==DAD.file&&previewFile(DAD.file,t,getElemName(n),l).then(e=>{-1!==r.index&&("drop"===r.type?(null!==DAD.elem.drag[r.index].input&&(DAD.elem.drag[r.index].input.files=new FileListItem(l?[...DAD.file]:DAD.file[0])),void 0!==DAD.elem.drag[r.index].end&&DAD.elem.drag[r.index].end(e,null)):(null!==DAD.elem.file[r.index].input&&(DAD.elem.file[r.index].input.files=new FileListItem(l?[...DAD.file]:DAD.file[0])),void 0!==DAD.elem.file[r.index].end&&DAD.elem.file[r.index].end(e,null)))}).catch(e=>{-1!==r.index&&("drop"===r.type?void 0!==DAD.elem.drag[r.index].end&&DAD.elem.drag[r.index].end(null,e):void 0!==DAD.elem.file[r.index].end&&DAD.elem.file[r.index].end(null,e))}),!0},previewFile=(e,n,t,r,l=0)=>{let a=new FileReader;a.readAsDataURL(e[l]);let d=(webkitURL||URL).createObjectURL(e[l]);return new Promise((s,i)=>{a.onloadend=(i=>{DAD.data.files.push({file:e[l],blob:d,data:a.result,filename:e[l].name,type:n,inputName:t,total:i.total,loaded:i.loaded}),r?(l++,e.length>l?s(previewFile(DAD.file,n,t,r,l)):s(DAD.data)):s(DAD.data)}),a.onerror=(e=>{i(new Error("Failed to load ",e))})})},isNodelist=e=>void 0!==e.length&&void 0!==e.item,toBoolean=e=>"true"===e,getTypeMultiple=e=>{let n=!1;return e.hasAttribute("multiple")&&e.getAttribute("multiple").length>0&&(n=toBoolean(e.getAttribute("multiple"))),n},getAllTabsByParent=e=>{let n=e.getElementsByTagName("*");for(let t of n)t.addEventListener("dragenter",n=>dragenter(n,e),!1),t.addEventListener("dragover",n=>dragover(n,e),!1)},elemAddEventDragged=e=>{getAllTabsByParent(e),e.addEventListener("dragenter",dragenter,!1),e.addEventListener("dragleave",dragleave,!1),e.addEventListener("dragover",dragover,!1),e.addEventListener("drop",n=>{n.preventDefault(),addFile(n,e,"drop")},!1)};DAD.draggedUpload=((e=defaultProps)=>{let n=e.element;if(null!==n&&isNodelist(n))for(let t of n)DAD.elem.drag.push({elem:t,input:e.input?e.input:null,start:e.start?e.start:void 0,end:e.end?e.end:void 0}),elemAddEventDragged(t);else null!==n&&(DAD.elem.drag.push({elem:n,input:e.input?e.input:null,start:e.start?e.start:void 0,end:e.end?e.end:void 0}),elemAddEventDragged(n))}),DAD.fileChange=((e=defaultProps)=>{let n=e.element;if(null!==n&&isNodelist(n))for(let t of n)DAD.elem.file.push({elem:t,input:e.input?e.input:null,start:e.start?e.start:void 0,end:e.end?e.end:void 0}),t.addEventListener("change",e=>{e.preventDefault(),addFile(e,t,"change")},!1);else null!==n&&(DAD.elem.file.push({elem:n,input:e.input?e.input:null,start:e.start?e.start:void 0,end:e.end?e.end:void 0}),n.addEventListener("change",e=>{e.preventDefault(),addFile(e,n,"change")},!1))});const dragContext=e=>{DAD.elem.draggable.forEach(n=>{if(e.target===n.node){let t=0,r=0;t=n.cords.startX-e.pageX,r=n.cords.startY-e.pageY,n.cords.endX+=-t,n.cords.endY+=-r,n.cords.startX=e.pageX,n.cords.startY=e.pageY,n.node.style.zIndex="100",n.node.style.top=`${n.cords.endY}px`,n.node.style.left=`${n.cords.endX}px`}else n.node.style.zIndex="99"})},addInObject=e=>{e.style.position="fixed",e.style.zIndex="99",e.style.cursor="move",DAD.elem.draggable.push({node:e,cords:{startX:0,startY:0,endX:0,endY:0}})},addEventDragAndDrop=()=>{DAD.elem.draggable.forEach(e=>{e.node.addEventListener("mousedown",n=>{let{x:t,y:r}=e.node.getBoundingClientRect();e.cords.startX=n.pageX,e.cords.startY=n.pageY,e.cords.endX=t,e.cords.endY=r,e.node.addEventListener("mousemove",dragContext,!1)}),e.node.addEventListener("mouseup",n=>{e.node.removeEventListener("mousemove",dragContext,!1)},!1)})};DAD.draggableContext=(e=>{if(null!==e&&isNodelist(e))for(let n of e)addInObject(n);else null!==e&&addInObject(e);null!==e&&DAD.elem.draggable.forEach(e=>{e.node.addEventListener("mousedown",n=>{let{x:t,y:r}=e.node.getBoundingClientRect();e.cords.startX=n.pageX,e.cords.startY=n.pageY,e.cords.endX=t,e.cords.endY=r,e.node.addEventListener("mousemove",dragContext,!1)}),e.node.addEventListener("mouseup",n=>{e.node.removeEventListener("mousemove",dragContext,!1)},!1)})});
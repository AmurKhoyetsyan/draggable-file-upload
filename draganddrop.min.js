/****************************************
 * 
 * Copyright (c) 2020 Amur Khoyetsyan
 * 
 * The MIT License (MIT)
 * 
 *****************************************/

let DAD={name:"Drag And Drop",elem:{file:[],drag:[],draggable:[]},file:null,data:{name:"Drag And Drop",files:[]}},defaultProps={element:null,input:null,start:void 0,end:void 0};const addClass=e=>{null!==DAD.elem.drag&&DAD.elem.drag.forEach(t=>{t.elem===e.target&&!t.elem.classList.contains("dragover")&&t.elem.classList.add("dragover")})},removeClass=e=>{null!==DAD.elem.drag&&DAD.elem.drag.forEach(e=>{e.elem.classList.contains("dragover")&&e.elem.classList.remove("dragover")})},dragenter=e=>{e.preventDefault(),addClass(e)},dragleave=e=>{e.preventDefault(),removeClass()},dragover=e=>{e.preventDefault(),addClass(e)},getElemName=e=>{let t={};return t.id=e.hasAttribute("id")?e.getAttribute("id"):null,t.name=e.hasAttribute("name")?e.getAttribute("name"):null,t.classes=e.hasAttribute("class")?e.getAttribute("class"):null,t.tagName=e.nodeName,t.node=e,t};function FileListItem(e){for(var t,d=t=(e=[].slice.call(Array.isArray(e)?e:arguments)).length,l=!0;d--&&l;)l=e[d]instanceof File;if(!l)throw new TypeError("expected argument to FileList is File or array of File objects");for(d=new ClipboardEvent("").clipboardData||new DataTransfer;t--;)d.items.add(e[t]);return d.files}const getIndex=(e,t)=>{let d=0;if("drop"===t){d=DAD.elem.drag.length;for(let t=0;t<d;t++)if(DAD.elem.drag[t].elem===e)return{index:t,type:"drop"}}else{d=DAD.elem.file.length;for(let t=0;t<d;t++)if(DAD.elem.file[t].elem===e)return{index:t,type:"file"}}return{index:-1,type:""}},addFile=(e,t,d)=>{let l=getIndex(t,d);-1!==l.index&&("drop"===l.type?void 0!==DAD.elem.drag[l.index].start&&DAD.elem.drag[l.index].start():void 0!==DAD.elem.file[l.index].start&&DAD.elem.file[l.index].start()),DAD.file=[],DAD.data.files=[],removeClass(),DAD.file="drop"===d?e.dataTransfer.files:e.target.files;let n=getTypeMultiple(t);void 0!==DAD.file&&previewFile(DAD.file,d,getElemName(t),n).then(e=>{-1!==l.index&&("drop"===l.type?(null!==DAD.elem.drag[l.index].input&&(DAD.elem.drag[l.index].input.files=new FileListItem(n?[...DAD.file]:DAD.file[0])),void 0!==DAD.elem.drag[l.index].end&&DAD.elem.drag[l.index].end(e,null)):(null!==DAD.elem.file[l.index].input&&(DAD.elem.file[l.index].input.files=new FileListItem(n?[...DAD.file]:DAD.file[0])),void 0!==DAD.elem.file[l.index].end&&DAD.elem.file[l.index].end(e,null)))}).catch(e=>{-1!==l.index&&("drop"===l.type?void 0!==DAD.elem.drag[l.index].end&&DAD.elem.drag[l.index].end(null,e):void 0!==DAD.elem.file[l.index].end&&DAD.elem.file[l.index].end(null,e))})},previewFile=(e,t,d,l,n=0)=>{let r=new FileReader;r.readAsDataURL(e[n]);let a=(webkitURL||URL).createObjectURL(e[n]);return new Promise((i,o)=>{r.onloadend=(o=>{DAD.data.files.push({file:e[n],blob:a,data:r.result,filename:e[n].name,type:t,inputName:d,total:o.total,loaded:o.loaded}),l?(n++,e.length>n?i(previewFile(DAD.file,t,d,l,n)):i(DAD.data)):i(DAD.data)}),r.onerror=(e=>{o(new Error("Failed to load ",e))})})},isNodelist=e=>void 0!==e.length&&void 0!==e.item,toBoolean=e=>"true"===e,getTypeMultiple=e=>{let t=!1;return e.hasAttribute("multiple")&&e.getAttribute("multiple").length>0&&(t=toBoolean(e.getAttribute("multiple"))),t},elemAddEventDraged=e=>{e.addEventListener("dragenter",dragenter,!1),e.addEventListener("dragleave",dragleave,!1),e.addEventListener("dragover",dragover,!1),e.addEventListener("drop",t=>{t.preventDefault(),addFile(t,e,"drop")},!1)};DAD.dragedUpload=((e=defaultProps)=>{let t=e.element;if(null!==t&&isNodelist(t))for(element of t)DAD.elem.drag.push({elem:element,input:e.input?e.input:null,start:e.start?e.start:void 0,end:e.end?e.end:void 0}),elemAddEventDraged(element);else null!==t?(DAD.elem.drag.push({elem:t,input:e.input?e.input:null,start:e.start?e.start:void 0,end:e.end?e.end:void 0}),elemAddEventDraged(t)):e.end(null,new Error("Element of undefined"))}),DAD.fileChange=((e=defaultProps)=>{let t=e.element;if(null!==t&&isNodelist(t))for(element of t)DAD.elem.file.push({elem:element,input:e.input?e.input:null,start:e.start?e.start:void 0,end:e.end?e.end:void 0}),element.addEventListener("change",e=>{e.preventDefault(),addFile(e,element,"change")},!1);else null!==t?(DAD.elem.file.push({elem:t,input:e.input?e.input:null,start:e.start?e.start:void 0,end:e.end?e.end:void 0}),t.addEventListener("change",e=>{e.preventDefault(),addFile(e,t,"change")},!1)):e.end(null,new Error("Element of undefined"))});const dragContext=e=>{DAD.elem.draggable.forEach(t=>{if(e.target===t.node){let d=0,l=0;d=t.cords.startX-e.pageX,l=t.cords.startY-e.pageY,t.cords.endX+=-d,t.cords.endY+=-l,t.cords.startX=e.pageX,t.cords.startY=e.pageY,t.node.style.zIndex="100",t.node.style.top=`${t.cords.endY}px`,t.node.style.left=`${t.cords.endX}px`}else t.node.style.zIndex="99"})},addInOblect=e=>{e.style.position="fixed",e.style.zIndex="99",e.style.cursor="move",DAD.elem.draggable.push({node:e,cords:{startX:0,startY:0,endX:0,endY:0}})},addEventDragAndDrop=()=>{DAD.elem.draggable.forEach(e=>{e.node.addEventListener("mousedown",t=>{let{x:d,y:l}=e.node.getBoundingClientRect();e.cords.startX=t.pageX,e.cords.startY=t.pageY,e.cords.endX=d,e.cords.endY=l,e.node.addEventListener("mousemove",dragContext,!1)}),e.node.addEventListener("mouseup",t=>{e.node.removeEventListener("mousemove",dragContext,!1)},!1)})};DAD.dragableContex=(e=>{if(null!==e&&isNodelist(e))for(item of e)addInOblect(item);else null!==e&&addInOblect(e);null!==e&&DAD.elem.draggable.forEach(e=>{e.node.addEventListener("mousedown",t=>{let{x:d,y:l}=e.node.getBoundingClientRect();e.cords.startX=t.pageX,e.cords.startY=t.pageY,e.cords.endX=d,e.cords.endY=l,e.node.addEventListener("mousemove",dragContext,!1)}),e.node.addEventListener("mouseup",t=>{e.node.removeEventListener("mousemove",dragContext,!1)},!1)})});
/***********************************************************************
 *
 * Copyright (c) 2020 Amur Khoyetsyan
 *
 * The MIT License (MIT)
 *
 ************************************************************************/

let Chunk={name:"Chunk Uploader",file:{},inProcess:null,completed:function(){return{chunks:100*(this.file.numberOfChunk-this.inProcess)/this.file.numberOfChunk,one:100/this.file.numberOfChunk}}},params={chunkSize:1e6,url:null,file:null,uniqueID:!1,keys:{key:"file",end:"end",order:"order"},form:{},headers:{"Content-type":"multipart/form-data"},start:null,end:null,onError:null,progress:null};Chunk.params=params;const setParams=e=>{for(let n in e)Chunk.params[n]=e[n]},generateUniqueID=(e=10,n="")=>(n+=Math.random().toString(36).substr(2,9)).length>e?n.substr(0,e):n.length===e?n:generateUniqueID(e,n),updateProgress=e=>{if(e.lengthComputable){let n=Math.round(e.loaded/e.total*100),r=Chunk.completed(),u=r.chunks+r.one*n/100;null!==Chunk.params.progress&&Chunk.params.progress(u)}},fileUploader=e=>{let n=new XMLHttpRequest,r=Chunk.params.headers;n.upload.addEventListener("progress",updateProgress),n.open("POST",Chunk.params.url);for(let e in r)n.setRequestHeader(e,r[e]);return new Promise((r,u)=>{n.send(e[0]),n.onload=(n=>{r({chunks:e,event:n.currentTarget})}),n.onerror=(e=>{u(e)})})},uploadChunks=e=>{fileUploader(e).then(e=>{if(e.chunks.shift(),Chunk.inProcess=e.chunks.length,e.chunks.length>0)uploadChunks(e.chunks);else if(null!==Chunk.params.end){let n=e.event;try{Chunk.params.end({response:JSON.parse(n.response),statusText:n.statusText,status:n.status})}catch(e){Chunk.params.onError(e)}}}).catch(e=>{null!==Chunk.params.onError&&Chunk.params.onError(e)})},getChunks=(e,n=1e6,r=0,u=1,s=[])=>{let a=Math.min(r+n,e.size),t=e.slice(r,a),h=Math.ceil(e.size/n)===u;return s.push(t),h?s:getChunks(e,n,a,++u,s)},createChunk=e=>{let n=Chunk.params,r=n.form,u=getChunks(e,n.chunkSize),s=0,a=u.map((e,u)=>{let a=new FormData;s=u+1,a.append(n.keys.key,e),a.append(n.keys.order,s),a.append(n.keys.end,Chunk.file.numberOfChunk===s);for(let e in r)a.append(e,r[e]);return a});Chunk.inProcess=s,uploadChunks(a)};Chunk.getChunks=getChunks,Chunk.uploader=(e=>{setParams(e);let n=e.file;if(null!==n)try{null!==Chunk.params.start&&Chunk.params.start(),Chunk.file.fileSize=n.size,Chunk.file.numberOfChunk=Math.ceil(n.size/Chunk.params.chunkSize),Chunk.params.uniqueID&&(Chunk.params.form.uuid=generateUniqueID(Chunk.params.uniqueID)),createChunk(n)}catch(e){null!==Chunk.params.onError&&Chunk.params.onError(e)}else null!==Chunk.params.onError&&Chunk.params.onError(new TypeError("Change File"))});